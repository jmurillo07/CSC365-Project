# Venues: 600
# Events: 2,500 (remember has fkey with venues)
# Fights: 200,000 (remember has fkey with events, fights, fighter_stats)
# Fighter_stats: 400,000 (remember has fkey with fighters)
# Fighters: 80,000
# Users: 20,000
# Predictions: 300,000 (remember has fkey with fights and users, fights and users has to be unique now)

import sqlalchemy
import os
import dotenv
import random
from faker import Faker
import numpy as np

def database_connection_url():
    dotenv.load_dotenv()
    DB_USER: str = os.environ.get("POSTGRES_USER")
    DB_PASSWD = os.environ.get("POSTGRES_PASSWORD")
    DB_SERVER: str = os.environ.get("POSTGRES_SERVER")
    DB_PORT: str = os.environ.get("POSTGRES_PORT")
    DB_NAME: str = os.environ.get("POSTGRES_DB")
    return f"postgresql://{DB_USER}:{DB_PASSWD}@{DB_SERVER}:{DB_PORT}/{DB_NAME}"

# Create a new DB engine based on our connection string
engine = sqlalchemy.create_engine(database_connection_url(), use_insertmanyvalues=True)

with engine.begin() as conn:
    print("============")
    print("CREATING TABLES...")
    conn.execute(sqlalchemy.text("""
    DROP TABLE IF EXISTS predictions CASCADE;
    DROP TABLE IF EXISTS users CASCADE;
    DROP TABLE IF EXISTS fights CASCADE;
    DROP TABLE IF EXISTS events CASCADE;
    DROP TABLE IF EXISTS venue CASCADE;
    DROP TABLE IF EXISTS fighter_stats CASCADE;
    DROP TABLE IF EXISTS fighters CASCADE;
    DROP TABLE IF EXISTS weight_classes CASCADE;
    DROP TABLE IF EXISTS victory_methods CASCADE;
    DROP TABLE IF EXISTS stances CASCADE;

    CREATE TABLE stances (
        id INTEGER GENERATED BY DEFAULT AS IDENTITY,
        stance TEXT NOT NULL,
        CONSTRAINT pk_stances PRIMARY KEY (id)
    );

    INSERT INTO stances (stance) VALUES ('Orthodox');

    INSERT INTO stances (stance) VALUES ('Southpaw');

    INSERT INTO stances (stance) VALUES ('Switch');

    CREATE TABLE victory_methods (
        id INTEGER GENERATED BY DEFAULT AS IDENTITY,
        method TEXT,
        CONSTRAINT pk_victory_methods PRIMARY KEY (id)
    );

    INSERT INTO victory_methods (method) VALUES ('SUB');

    INSERT INTO victory_methods (method) VALUES ('KO/TKO');

    INSERT INTO victory_methods (method) VALUES ('S-Dec');

    INSERT INTO victory_methods (method) VALUES ('M-Dec');

    INSERT INTO victory_methods (method) VALUES ('U-Dec');

    INSERT INTO victory_methods (method) VALUES ('CNC');

    INSERT INTO victory_methods (method) VALUES ('DQ');

    CREATE TABLE weight_classes (
        id INTEGER GENERATED BY DEFAULT AS IDENTITY,
        class TEXT,
        CONSTRAINT pk_weight_classes PRIMARY KEY (id)
    );

    INSERT INTO weight_classes (class) VALUES ('Flyweight');

    INSERT INTO weight_classes (class) VALUES ('Bantamweight');

    INSERT INTO weight_classes (class) VALUES ('Featherweight');

    INSERT INTO weight_classes (class) VALUES ('Lightweight');

    INSERT INTO weight_classes (class) VALUES ('Welterweight');

    INSERT INTO weight_classes (class) VALUES ('Middleweight');

    INSERT INTO weight_classes (class) VALUES ('Light Heavyweight');

    INSERT INTO weight_classes (class) VALUES ('Heavyweight');

    INSERT INTO weight_classes (class) VALUES ('Women''s Strawweight');

    INSERT INTO weight_classes (class) VALUES ('Women''s Flyweight');

    INSERT INTO weight_classes (class) VALUES ('Women''s Bantamweight');

    INSERT INTO weight_classes (class) VALUES ('Women''s Featherweight');

    INSERT INTO weight_classes (class) VALUES ('Catch Weight');

    INSERT INTO weight_classes (class) VALUES ('Open Weight');

    CREATE TABLE fighters (
        fighter_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
        first_name TEXT,
        last_name TEXT,
        height INTEGER,
        reach INTEGER,
        stance_id INTEGER,
        CONSTRAINT pk_fighters PRIMARY KEY (fighter_id),
        CONSTRAINT fk_fighters_stance_id_stances FOREIGN KEY(stance_id) REFERENCES stances (id)
    );

    CREATE TABLE fighter_stats (
        stats_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
        kd INTEGER DEFAULT '0',
        strikes INTEGER DEFAULT '0',
        td INTEGER DEFAULT '0',
        sub INTEGER DEFAULT '0',
        fighter_id INTEGER NOT NULL,
        CONSTRAINT pk_fighter_stats PRIMARY KEY (stats_id),
        CONSTRAINT fk_fighter_stats_fighter_id_fighters FOREIGN KEY(fighter_id) REFERENCES fighters (fighter_id)
    );

    CREATE TABLE venue (
        venue_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
        venue_name TEXT,
        CONSTRAINT pk_venue PRIMARY KEY (venue_id),
        CONSTRAINT uq_venue_venue_name UNIQUE (venue_name)
    );

    CREATE TABLE events (
        event_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
        event_name TEXT DEFAULT '',
        event_date TIMESTAMP WITHOUT TIME ZONE,
        venue_id INTEGER,
        attendance INTEGER,
        CONSTRAINT pk_events PRIMARY KEY (event_id),
        CONSTRAINT fk_events_venue_id_venue FOREIGN KEY(venue_id) REFERENCES venue (venue_id)
    );

    CREATE TABLE fights (
        fight_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
        event_id INTEGER,
        result INTEGER,
        fighter1_id INTEGER NOT NULL,
        fighter2_id INTEGER NOT NULL,
        weight_class INTEGER NOT NULL,
        method_of_vic INTEGER,
        round_num INTEGER NOT NULL CONSTRAINT ck_fights_ CHECK (round_num>=1 AND round_num<=5),
        round_time TEXT,
        stats1_id INTEGER NOT NULL,
        stats2_id INTEGER NOT NULL,
        CONSTRAINT pk_fights PRIMARY KEY (fight_id),
        CONSTRAINT fk_fights_event_id_events FOREIGN KEY(event_id) REFERENCES events (event_id),
        CONSTRAINT fk_fights_fighter1_id_fighters FOREIGN KEY(fighter1_id) REFERENCES fighters (fighter_id),
        CONSTRAINT fk_fights_fighter2_id_fighters FOREIGN KEY(fighter2_id) REFERENCES fighters (fighter_id),
        CONSTRAINT fk_fights_weight_class_weight_classes FOREIGN KEY(weight_class) REFERENCES weight_classes (id),
        CONSTRAINT fk_fights_method_of_vic_victory_methods FOREIGN KEY(method_of_vic) REFERENCES victory_methods (id),
        CONSTRAINT fk_fights_stats1_id_fighter_stats FOREIGN KEY(stats1_id) REFERENCES fighter_stats (stats_id),
        CONSTRAINT fk_fights_stats2_id_fighter_stats FOREIGN KEY(stats2_id) REFERENCES fighter_stats (stats_id)
    );

    CREATE TABLE users (
        user_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
        username TEXT NOT NULL,
        password TEXT NOT NULL,
        CONSTRAINT pk_users PRIMARY KEY (user_id),
        CONSTRAINT uq_users_username UNIQUE (username)
    );

    CREATE TABLE predictions (
        prediction_id INTEGER GENERATED BY DEFAULT AS IDENTITY,
        fight_id BIGINT NOT NULL,
        fighter_id INTEGER NOT NULL,
        user_id INTEGER NOT NULL,
        created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT now() NOT NULL,
        CONSTRAINT pk_predictions PRIMARY KEY (prediction_id),
        CONSTRAINT uq_predictions_fight_id UNIQUE (fight_id, user_id),
        CONSTRAINT fk_predictions_fight_id_fights FOREIGN KEY(fight_id) REFERENCES fights (fight_id),
        CONSTRAINT fk_predictions_fighter_id_fighters FOREIGN KEY(fighter_id) REFERENCES fighters (fighter_id),
        CONSTRAINT fk_predictions_user_id_users FOREIGN KEY(user_id) REFERENCES users (user_id) ON DELETE CASCADE
    );
    """))
    print("TABLES CREATED")
    
fake = Faker()
# 1 million total fake rows
num_venues = 600
num_events = 2500
num_fights = 200000
num_fighter_stats = num_fights * 2
num_fighters = 80000
num_users = 20000
num_predictions = 300000

height_distribution = np.random.default_rng().normal(70, 10, num_fighters)
stance_sample_distirbution = np.random.choice([1, 2, 3], num_fighters, p=[0.803, 0.174, 0.023])
weight_class_sample_distribution = np.random.choice([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
                                                    num_fights,
                                                    p=[0.07, 0.12, 0.12, 0.13, 0.12, 0.11, 0.06, 0.07,
                                                       0.07, 0.07, 0.04, 0.01, 0.003, 0.007])

with engine.begin() as conn:
    print("============")
    print("CREATING FAKE VENUES...")

    venues = []
    venues_set = {}
    for i in range(num_venues):
        country = fake.country()
        state = ""
        if country == 'United States of America':
            state = ', ' + fake.state()
        location = fake.city() + state + ', ' + country
        while location in venues_set:
            location = fake.city() + state + ', ' + country
        venues_set[location] = 'a'
        venues.append({"venue_name": location})
    
    conn.execute(sqlalchemy.text("""
    INSERT INTO venue (venue_name) VALUES (:venue_name);
    """), venues)
    venues_set = None
    venues = None
    print("FAKE VENUES CREATED")

    print("============")
    print("CREATING FAKE EVENTS...")

    events = []
    for i in range(num_events):
        events.append({
            "event_name": fake.text(),
            "event_date": fake.date_between(),
            "venue_id": np.random.randint(1, num_venues + 1),
            "attendance": np.random.randint(1000, 37414),
        })
    
    conn.execute(sqlalchemy.text("""
    INSERT INTO events (event_name, event_date, venue_id, attendance)
    VALUES (:event_name, :event_date, :venue_id, :attendance);
    """), events)
    events = None
    print("FAKE EVENTS CREATED")

    print("============")
    print("CREATING FAKE FIGHTERS...")

    fighters = []
    for i in range(num_fighters):
        height = int(height_distribution[i].item())
        reach = int(np.random.normal(height, 3))
        fighters.append({
            "first_name": fake.first_name(),
            "last_name": fake.last_name(),
            "height": height,
            "reach": reach,
            "stance_id": stance_sample_distirbution[i].item(),
        })
    
    conn.execute(sqlalchemy.text("""
    INSERT INTO fighters (first_name, last_name, height, reach, stance_id)
    VALUES (:first_name, :last_name, :height, :reach, :stance_id);
    """), fighters)
    fighters = None
    print("FAKE FIGHTERS CREATED")

    print("============")
    print("CREATING FAKE FIGHTER STATS AND FIGHTS...")

    fighter_stats = []
    fights = []
    fights_fighters = {}
    for i in range(num_fights):
        fighter1 = np.random.randint(1, num_fighters + 1)
        fighter2 = np.random.randint(1, num_fighters + 1)
        fights_fighters[i + 1] = (fighter1, fighter2)
        while fighter2 == fighter1:
            fighter2 = np.random.randint(1, num_fighters + 1)
        fighter_stats.append({
            "kd": int(np.random.lognormal(0, 0.1)),
            "strikes": np.random.randint(0, 150),
            "td": int(np.random.lognormal(0, 0.5)),
            "sub": int(np.random.lognormal(0, 0.1)),
            "fighter_id": fighter1,
        })
        fighter_stats.append({
            "kd": int(np.random.lognormal(0, 0.1)),
            "strikes": np.random.randint(0, 150),
            "td": int(np.random.lognormal(0, 0.5)),
            "sub": int(np.random.lognormal(0, 0.1)),
            "fighter_id": fighter2
        })
        
        temp = random.randint(0, 1)
        if temp < 0.1:
            result = None
        elif temp < 0.55:
            result = fighter1
        else:
            result = fighter2

        round_time = str(np.random.randint(1, 6)) + ":" + str(np.random.randint(1, 6)) + str(np.random.randint(1, 10))
        round_time = "5:00" if round_time > "5:00" else round_time

        fights.append({
            "event_id": np.random.randint(1, num_events + 1),
            "result": result,
            "fighter1_id": fighter1,
            "fighter2_id": fighter2,
            "weight_class": weight_class_sample_distribution[i].item(),
            "method_of_vic": np.random.randint(1, 8),
            "round_num": np.random.randint(1, 6),
            "round_time": round_time,
            "stats1_id": i * 2 + 1,
            "stats2_id": i * 2 + 2,
        })
    
    conn.execute(sqlalchemy.text("""
    INSERT INTO fighter_stats (kd, strikes, td, sub, fighter_id)
    VALUES (:kd, :strikes, :td, :sub, :fighter_id);
    """), fighter_stats)
    print("FIGHTER STATS CREATED")
    fighter_stats = None
    conn.execute(sqlalchemy.text("""
    INSERT INTO fights (event_id, result, fighter1_id, fighter2_id, weight_class,
                        method_of_vic, round_num, round_time, stats1_id, stats2_id)
    VALUES (:event_id, :result, :fighter1_id, :fighter2_id, :weight_class,
            :method_of_vic, :round_num, :round_time, :stats1_id, :stats2_id);
    """), fights)
    fights = None
    print("FIGHTS CREATED")

    print("============")
    print("CREATING USERS")

    users = []
    for i in range(num_users):
        users.append({
            "username": fake.unique.user_name(),
            "password": fake.sentence(),
        })
    
    conn.execute(sqlalchemy.text("""
    INSERT INTO users (username, password)
    VALUES (:username, crypt(:password, gen_salt('bf')));
    """), users)
    print("USERS CREATED")
    users = None

    print("============")
    print("CREATING PREDICTIONS")

    predictions = []
    used_predictions = {}
    for i in range(num_predictions):
        user_id = random.randint(1, num_users)
        fight_id = random.randint(1, num_fights)
        while (user_id, fight_id) in used_predictions:
            fight_id = random.randint(1, num_fights)
        used_predictions[(user_id, fight_id)] = 'a'
        choice = fights_fighters[fight_id][random.randint(0, 1)] 

        predictions.append({
            "fight_id": fight_id,
            "fighter_id": choice,
            "user_id": user_id,
        })
    
    conn.execute(sqlalchemy.text("""
    INSERT INTO predictions (fight_id, fighter_id, user_id)
    VALUES (:fight_id, :fighter_id, :user_id)
    """), predictions)
    print("PREDICTIONS CREATED")
    